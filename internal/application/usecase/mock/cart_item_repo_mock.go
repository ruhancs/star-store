// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/gateway/cart_item_repository.go

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	reflect "reflect"
	entity "star_store/internal/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockCartItemRepository is a mock of CartItemRepository interface.
type MockCartItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartItemRepositoryMockRecorder
}

// MockCartItemRepositoryMockRecorder is the mock recorder for MockCartItemRepository.
type MockCartItemRepositoryMockRecorder struct {
	mock *MockCartItemRepository
}

// NewMockCartItemRepository creates a new mock instance.
func NewMockCartItemRepository(ctrl *gomock.Controller) *MockCartItemRepository {
	mock := &MockCartItemRepository{ctrl: ctrl}
	mock.recorder = &MockCartItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartItemRepository) EXPECT() *MockCartItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCartItemRepository) Create(cartItem *entity.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", cartItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCartItemRepositoryMockRecorder) Create(cartItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCartItemRepository)(nil).Create), cartItem)
}

// Delete mocks base method.
func (m *MockCartItemRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCartItemRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCartItemRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockCartItemRepository) Get(id string) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCartItemRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCartItemRepository)(nil).Get), id)
}

// GetByCartID mocks base method.
func (m *MockCartItemRepository) GetByCartID(cartId, productID string) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCartID", cartId, productID)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCartID indicates an expected call of GetByCartID.
func (mr *MockCartItemRepositoryMockRecorder) GetByCartID(cartId, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCartID", reflect.TypeOf((*MockCartItemRepository)(nil).GetByCartID), cartId, productID)
}

// List mocks base method.
func (m *MockCartItemRepository) List(cartID string) ([]*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", cartID)
	ret0, _ := ret[0].([]*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCartItemRepositoryMockRecorder) List(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCartItemRepository)(nil).List), cartID)
}

// Update mocks base method.
func (m *MockCartItemRepository) Update(cartItem *entity.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", cartItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCartItemRepositoryMockRecorder) Update(cartItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCartItemRepository)(nil).Update), cartItem)
}
